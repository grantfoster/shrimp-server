// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listUsers = `-- name: ListUsers :many
SELECT id, email FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createUser = `-- name: createUser :one
insert into users (
  email
) values (
  $1
) returning id
`

func (q *Queries) createUser(ctx context.Context, email pgtype.Text) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createUser, email)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
